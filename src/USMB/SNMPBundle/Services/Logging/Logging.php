<?php
/**
 * Created by IntelliJ IDEA.
 * User: tfoissard
 * Date: 27/09/2018
 * Time: 20:49
 */

namespace USMB\SNMPBundle\Services\Logging;

use Doctrine\ORM\EntityManager;
use Monolog\Logger;

/**
 * Class logging
 * @package USMB\SNMPBundle\Services\Logging
 */
class Logging
{

    /**
     * @var EntityManager
     */
    protected $entityManager;

    /**
     * @var Logger
     * System snmp error logging
     */
    protected $logger;

    /**
     * logging constructor.
     * @param EntityManager $entityManager
     * @param Logger $logger
     */
    public function __construct(EntityManager $entityManager, Logger $logger)
    {
        $this->entityManager = $entityManager;
        $this->logger = $logger;
    }

    /**
     * @param $request_result
     * @param $deviceId
     * @param $profileId
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function logSNMP($request_result, $deviceId, $profileId){
        //Retrieve the log class, depending on device & profile's id
        $entityName = "\USMB\SNMPBundle\Entity\Device_".$deviceId."_Profile_".$profileId;

        $entity = new $entityName();
        //Set the request result, $createdAt autogenerated
        $types = array("STRING: ", "INTEGER: "," kB");
        $request_result = str_replace($types, "", $request_result);
        $entity->setResult($request_result);

        //Persist entry in database
        $this->entityManager->persist($entity);
        $this->entityManager->flush();
    }

    /**
     * @param $result
     * @param $deviceId
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function logICMP($result, $deviceId){
        //Retrieve the device
        $deviceRepository = $this->entityManager->getRepository('USMBSNMPBundle:Device');
        $device = $deviceRepository->findOneById($deviceId);

        //Set the result off the ICMP request
        $device->setIsAlive($result);

        //Persist in database
        $this->entityManager->persist($device);
        $this->entityManager->flush();
    }

    /**
     * @param $error
     */
    public function logError($error){
        $this->logger->error($error);
    }

    /**
     * @param $error
     */
    public function logInfo($error){
        $this->logger->info($error);
    }

}